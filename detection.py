import cv2
import argparse
import glob
import numpy as np

img = cv2.imread('Dataset/yes/Y104.jpg')

print('Width: {} px'.format(img.shape[1]))
print('Height: {} px'.format(img.shape[0]))
print('Channels: {} px'.format(img.shape[2]))

dim=(300,390)

img=cv2.resize(img, dim)

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY, 0.7)
x, thresh = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY)
y, thresh_inv = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY_INV)

kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (10, 5))
closing = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
closing = cv2.erode(closing, None, iterations = 14)
closing = cv2.dilate(closing, None, iterations = 13)

ret, mask = cv2.threshold(closing, 155, 255, cv2.THRESH_BINARY) 
#apply AND operation on image and mask generated by thrresholding
final = cv2.bitwise_and(img, img, mask = mask) 

sigma=0.33
v = np.median(closing)
lower = int(max(0, (1.0 - sigma)*v))
upper = int(min(255, (1.0 + sigma)*v))
edge = cv2.Canny(closing, lower, upper)

(cnts, _) = cv2.findContours(edge.copy(), cv2.RETR_EXTERNAL,
cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(img, cnts, -1, (0, 0, 255), 2)

cv2.imshow('Image grayscale',gray)
cv2.imshow('Image threshold',thresh)
cv2.imshow('Image threshold inverse',thresh_inv)
cv2.imshow('Image close',closing)
cv2.imshow('Image mask',final)
cv2.imshow('Image edge detec',edge)
cv2.imshow('Image',img)

cv2.waitKey(0)